<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Collections库</title>
      <link href="/2023/10/22/Collections%E5%BA%93/"/>
      <url>/2023/10/22/Collections%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="python-collections库详解">Python Collections库详解</h1><p>Python的 <code>collections</code> 库提供了一些额外的数据结构，用于扩展内置的列表、元组和字典等数据类型。这些数据结构针对特定的使用场景进行了优化，可以极大地简化编程任务。在本篇文章中，我们将探索一些常用的 <code>collections</code> 库中的数据类型。</p><h2 id="defaultdict">defaultdict</h2><p><code>defaultdict</code> 是 <code>dict</code> 的一个子类，它为缺失的键提供了默认值。当访问一个不存在的键时，不会引发 <code>KeyError</code> 错误，而是返回一个默认值。这在计数、分组元素或构建复杂数据结构时特别有用。</p><p>使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个默认值为0的defaultdict</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter[<span class="string">&#x27;apple&#x27;</span>] += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter[<span class="string">&#x27;banana&#x27;</span>] += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter</span><br><span class="line">defaultdict(&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;, &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="counter">Counter</h2><p><code>Counter</code> 是一个方便的工具，用于计数可哈希对象。它提供了简单的计数功能，可以用于统计元素出现的次数、查找列表中的重复元素等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个Counter对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter = Counter(numbers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter</span><br><span class="line">Counter(&#123;<span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="deque">deque</h2><p><code>deque</code> 是一个双端队列，支持高效地在两端进行添加和删除操作。它比列表更适合用于实现队列、栈和循环缓冲区等数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个deque对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue</span><br><span class="line">deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="namedtuple">namedtuple</h2><p><code>namedtuple</code> 是一个用于创建具有命名字段的元组子类的工具。它可以帮助提高代码的可读性，使得元组更具有结构性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个namedtuple类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person = namedtuple(<span class="string">&#x27;Person&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = Person(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.Person&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person</span><br><span class="line">Person(name=<span class="string">&#x27;Alice&#x27;</span>, age=<span class="number">25</span>, gender=<span class="string">&#x27;female&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vlfii</title>
      <link href="/2023/07/18/vlfii/"/>
      <url>/2023/07/18/vlfii/</url>
      
        <content type="html"><![CDATA[<h1 id="vlfii">Vlfii</h1><h3 id="玩小鸟飞飞f700随手写的">玩小鸟飞飞F700随手写的</h3><h3 id="图形化用起来太难受了">图形化用起来太难受了</h3><h3 id="幸好他们的源码是xml-那我就能霍霍啦">幸好他们的源码是xml，那我就能霍霍啦</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/ERA-YES/Vlfii">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Vlfii </div>            <div class="tag-link-sitename"> Github开源链接 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>小鸟飞飞图形化编程的文本编程，针对于小鸟飞飞图形化编程群控软件，采用python构建，可直接引用为库运行，目前已实现大部分常用函数，正在更新中</p><h3 id="使用注意">使用注意</h3><p>建议将库文件与源代码文件放在同一目录下</p><p>使用前设置无人机列表、文件名、音乐名等:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> vlfii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> vlfii</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认ip从&quot;192.168.31.101&quot;递增，传入第三参数以调整</span></span><br><span class="line">vlfii.DRONE = [</span><br><span class="line">    [x1, y1, [<span class="string">&quot;192.169.31.109&quot;</span>]],</span><br><span class="line">    [x2, y2],</span><br><span class="line">    [x3, y3],</span><br><span class="line">    [x4, y4],</span><br><span class="line">    [x5, y5],</span><br><span class="line">]</span><br><span class="line">vlfii.FILE = <span class="string">&quot;output&quot;</span></span><br><span class="line">vlfii.TEST = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">music(<span class="string">&quot;好听的音乐&quot;</span>)</span><br></pre></td></tr></table></figure><p>所有代码写完后:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save()</span><br></pre></td></tr></table></figure><p>最后运行程序，在程序同一目录下就会生成&quot;output.vlfii&quot;</p><p><strong>注意，在使用群控软件打开后，需要一次点击飞机以让程序生成文本代码，否则将会报错</strong></p><p><strong>我之所以没实现这部分的逻辑就是因为没有这些代码程序能照常打开，而且软件能自动生成</strong></p><h3 id="下表为图形化代码块与函数的对于关系">下表为图形化代码块与函数的对于关系</h3><table><thead><tr><th>代码块</th><th>函数</th><th>参数</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>开始</td><td>start</td><td>-</td><td>-</td><td>-</td></tr><tr><td>Start at</td><td>StartTime</td><td>time = “00:00”, color = “#cccccc”</td><td>-</td><td>-</td></tr><tr><td>结束Start at代码块</td><td>End</td><td>-</td><td>-</td><td>-</td></tr><tr><td>延时</td><td>Delay</td><td>time = 1000</td><td>-</td><td>-</td></tr><tr><td>解锁</td><td>Unlock</td><td>-</td><td>-</td><td>-</td></tr><tr><td>上锁</td><td>Lock</td><td>-</td><td>-</td><td>-</td></tr><tr><td>水平速度 水平加速度</td><td>Horizontal</td><td>hSpeed = 100, hAcc = 100</td><td>-</td><td>-</td></tr><tr><td>垂直速度 垂直加速度</td><td>Vertical</td><td>vSpeed = 100, vAcc = 100</td><td>-</td><td>-</td></tr><tr><td>角速度</td><td>AngularVelocity</td><td>w</td><td>-</td><td>-</td></tr><tr><td>起飞  cm</td><td>TakeOff</td><td>alt = 120</td><td>-</td><td>-</td></tr><tr><td>降落</td><td>Land</td><td>-</td><td>-</td><td>-</td></tr><tr><td>直线移至</td><td>MoveToCoord</td><td>x, y, z = 120</td><td>-</td><td>-</td></tr><tr><td>X, Y, Z方向移动</td><td>RelativePosition</td><td>x, y, z</td><td>-</td><td>-</td></tr><tr><td>飞机灯光变为</td><td>LedAllOn</td><td>color=&quot;#ffffff&quot;</td><td>-</td><td>-</td></tr><tr><td>熄灭飞机灯光</td><td>LedAllOff</td><td>-</td><td>-</td><td>-</td></tr><tr><td>飞机在delay毫秒内逐渐变为color，亮度为bright，然后dur毫秒内变暗</td><td>LedAllBreath</td><td>color, delay = 1000, dur = 1000, bright = 1</td><td>-</td><td>-</td></tr><tr><td>机身在delay毫秒内逐渐变为color，亮度为bright，然后dur毫秒内变暗</td><td>LedBodyBreath</td><td>color, delay = 1000, dur = 1000, bright = 1</td><td>-</td><td>-</td></tr><tr><td>机身灯光先变为color，亮度为bright，持续dur,再关闭delay</td><td>LedBodyBlink</td><td>color, dur, delay, bright</td><td>-</td><td>-</td></tr><tr><td>机身灯光变为</td><td>LedBodyOn</td><td>color=&quot;#ffffff&quot;</td><td>-</td><td>-</td></tr><tr><td>直线移至，飞机灯光变为</td><td>WaypointRGB</td><td>x, y, z, color</td><td>-</td><td>-</td></tr><tr><td>四个机臂灯光变为color1, color2, color3, color4, 然后灯光True/False时针方向旋转，转一圈时间为delay</td><td>LedDroneArmHorse</td><td>color1, color2, color3, color4, clock, delay</td><td>-</td><td>-</td></tr><tr><td>四个机臂同亮脉冲color1, color2, color3, color4，频率frequency</td><td>LedDroneArmPulse</td><td>color1, color2, color3, color4, frequency</td><td>-</td><td>-</td></tr><tr><td>结束一架飞机并转向下一架</td><td>finish</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h3 id="新增功能">新增功能</h3><table><thead><tr><th>函数</th><th>参数</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>Start</td><td>-</td><td><code>start</code>的别名，用于转换</td><td>-</td></tr><tr><td>Arm</td><td>-</td><td><code>Unlock</code>的别名，用于转换</td><td></td></tr><tr><td>Takeoff</td><td>-</td><td><code>TakeOff</code>的别名，用于转换</td><td>-</td></tr><tr><td>Move</td><td>-</td><td><code>Move</code>的别名，用于转换</td><td>-</td></tr><tr><td>MoveToCoord_AutoDelay</td><td>x, y, z = 120, time = 0</td><td>传入目标坐标，增减时间</td><td>[时间, 距离]</td></tr><tr><td>Move_Circle</td><td>x, y, z = 120, n = 8, r = 100, time = 0</td><td>飞圆心为传入坐标的n个点的半径为r的圆</td><td>int tot 总时间</td></tr><tr><td>Move_CircleFind</td><td>A, B, z = 120, n = 16, dir = 1, time = 0</td><td>直接从B点开始飞圆心为A点的圆</td><td>int tot 总时间</td></tr><tr><td>Circle</td><td>n, r, dir = 1</td><td>返回一个被n均分的圆</td><td>list c</td></tr><tr><td>Circle_FindPoint</td><td>A, B, n, dir = 1</td><td>返回圆心A点，经过B点的圆</td><td>list p</td></tr><tr><td>music</td><td>name</td><td>设定代码的音乐，接受文件名</td><td>-</td></tr><tr><td>Time</td><td>-</td><td>计算以返回当前时间</td><td>str “MM:SS”</td></tr></tbody></table><p><strong>函数介绍较简单，更多请在代码里查看</strong></p><h3 id="转换器">转换器</h3><p><strong>VlfiiConverter</strong></p><blockquote><p>复制<code>小鸟飞飞图形化编程群控软件</code>右侧生成的文本源代码，运行<code>VlfiiConverter.py</code>，程序将会直接输出转换后的python程序，此程序在引用本Vlfii库是，可以直接运行并生成代码。</p></blockquote><ul><li>在安装<code>pyperclip</code>库后程序将直接将转换后的代码粘贴入剪贴板</li></ul><p>命令行运行此程序以安装<code>pyperclip</code>库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyperclip</span><br></pre></td></tr></table></figure><p><strong>!注意，生成的代码在<code>from Vlfii import *</code>时才有效</strong></p><h3 id="库内部变量">库内部变量</h3><table><thead><tr><th>变量名</th><th>属性</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td>__STATEMENT</td><td>私有值</td><td>-</td><td>表示当前状态</td></tr><tr><td>__FATHER</td><td>私有值</td><td>-</td><td>表示父标签</td></tr><tr><td>__WEB_XML</td><td>私有值</td><td>-</td><td>表示WebXml标签</td></tr><tr><td>__XML</td><td>私有值</td><td>-</td><td>表示Xml标签</td></tr><tr><td>__DRONE_NUM</td><td>私有值</td><td>-</td><td>当前代码框的无人机编号</td></tr><tr><td>__hSpeed</td><td>私有值</td><td>-</td><td>记录当前无人机的水平速度</td></tr><tr><td>__hAcc</td><td>私有值</td><td>-</td><td>记录当前无人机的水平加速度</td></tr><tr><td>TIME</td><td>公共</td><td>整型</td><td>记录当前时间</td></tr><tr><td>FILE</td><td>公共</td><td>字符串</td><td>输出文件名</td></tr><tr><td>POS</td><td>公共</td><td>列表</td><td>飞机当前坐标</td></tr><tr><td>DRONE</td><td>公共</td><td>列表</td><td>无人机列表</td></tr><tr><td>TEST</td><td>公共</td><td>布尔值</td><td>调试模式开关，开启时生成文件不可用</td></tr><tr><td>blue</td><td>公共</td><td>“#33ccff”</td><td>蓝色</td></tr><tr><td>yellow</td><td>公共</td><td>“#ffff00”</td><td>黄色</td></tr><tr><td>orange</td><td>公共</td><td>“#ff6600”</td><td>橙色</td></tr><tr><td>grey</td><td>公共</td><td>“#c0c0c0”</td><td>灰色</td></tr></tbody></table><h4 id="源码-想看就看吧-写的比较屎-之后会重构的">源码，想看就看吧，写的比较屎，之后会重构的</h4><h4 id="太长了-还是上github看吧">太长了，还是上Github看吧</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> minidom</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">__STATEMENT = <span class="literal">None</span></span><br><span class="line">__FATHER = <span class="literal">None</span></span><br><span class="line">__WEBXML = <span class="literal">None</span></span><br><span class="line">__XML = <span class="literal">None</span></span><br><span class="line">__DRONE_NUM = <span class="number">0</span></span><br><span class="line">__hSpeed = <span class="number">0</span></span><br><span class="line">__hAcc = <span class="number">0</span></span><br><span class="line">FILE = <span class="string">&quot;output&quot;</span></span><br><span class="line">POS = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">DRONE = []</span><br><span class="line">TEST = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blue = <span class="string">&quot;#33ccff&quot;</span></span><br><span class="line">yellow = <span class="string">&quot;#ffff00&quot;</span></span><br><span class="line">orange = <span class="string">&quot;#ff6600&quot;</span></span><br><span class="line">grey = <span class="string">&quot;#c0c0c0&quot;</span></span><br><span class="line"></span><br><span class="line">root = ET.Element(<span class="string">&quot;FiiConfig&quot;</span>, &#123;<span class="string">&quot;xmlns:xsi&quot;</span>: <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;xmlns:xsd&quot;</span>: <span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">FlightType = ET.SubElement(root, <span class="string">&quot;FlightType&quot;</span>)</span><br><span class="line">FlightType.text = <span class="string">&quot;F700&quot;</span></span><br><span class="line"></span><br><span class="line">CommunicationMode = ET.SubElement(root, <span class="string">&quot;CommunicationMode&quot;</span>)</span><br><span class="line">CommunicationMode.text = <span class="string">&quot;Qr&quot;</span></span><br><span class="line"></span><br><span class="line">ComName = ET.SubElement(root, <span class="string">&quot;ComName&quot;</span>)</span><br><span class="line"></span><br><span class="line">MapInfo = ET.SubElement(root, <span class="string">&quot;MapInfo&quot;</span>)</span><br><span class="line">Width = ET.SubElement(MapInfo, <span class="string">&quot;Width&quot;</span>)</span><br><span class="line">Width.text = <span class="string">&quot;400&quot;</span></span><br><span class="line">Height = ET.SubElement(MapInfo, <span class="string">&quot;Height&quot;</span>)</span><br><span class="line">Height.text = <span class="string">&quot;400&quot;</span></span><br><span class="line"></span><br><span class="line">MusicInfo = ET.SubElement(root, <span class="string">&quot;MusicInfo&quot;</span>)</span><br><span class="line">Name = ET.SubElement(MusicInfo, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">Format = ET.SubElement(MusicInfo, <span class="string">&quot;Format&quot;</span>)</span><br><span class="line">Format.text = <span class="string">&quot;mp3&quot;</span></span><br><span class="line"></span><br><span class="line">Flights = ET.SubElement(root, <span class="string">&quot;Flights&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">music</span>(<span class="params">name</span>):</span><br><span class="line">    Name.text = name</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">global</span> __FATHER, __XML, __WEBXML, DRONE, POS</span><br><span class="line">    i = __DRONE_NUM</span><br><span class="line">    FlightView = ET.SubElement(Flights, <span class="string">&quot;FlightView&quot;</span>)</span><br><span class="line">    Ip = ET.SubElement(FlightView, <span class="string">&quot;Ip&quot;</span>)</span><br><span class="line">    Ip.text = <span class="string">&quot;192.168.31.10&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">    InitPos = ET.SubElement(FlightView, <span class="string">&quot;InitPos&quot;</span>)</span><br><span class="line">    X = ET.SubElement(InitPos, <span class="string">&quot;X&quot;</span>)</span><br><span class="line">    X.text = <span class="built_in">str</span>(DRONE[i][<span class="number">0</span>])</span><br><span class="line">    Y = ET.SubElement(InitPos, <span class="string">&quot;Y&quot;</span>)</span><br><span class="line">    Y.text = <span class="built_in">str</span>(DRONE[i][<span class="number">1</span>])</span><br><span class="line">    POS = [*DRONE[i], <span class="number">0</span>]</span><br><span class="line">    Code = ET.SubElement(FlightView, <span class="string">&quot;Code&quot;</span>)</span><br><span class="line">    __WEBXML = ET.SubElement(FlightView, <span class="string">&quot;WebXml&quot;</span>)</span><br><span class="line">    __XML = ET.SubElement(__WEBXML, <span class="string">&quot;xml&quot;</span>, &#123;<span class="string">&quot;xmlns&quot;</span>:<span class="string">&quot;https://developers.google.com/blockly/xml&quot;</span>&#125;)</span><br><span class="line">    block = ET.SubElement(__XML, <span class="string">&quot;block&quot;</span>, &#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;Goertek_Start&quot;</span>, <span class="string">&quot;x&quot;</span>:<span class="string">&quot;300&quot;</span>, <span class="string">&quot;y&quot;</span>:<span class="string">&quot;100&quot;</span>&#125;)</span><br><span class="line">    __FATHER = block</span><br><span class="line">Start = start</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_next</span>():</span><br><span class="line">    <span class="keyword">global</span> __FATHER</span><br><span class="line">    <span class="built_in">next</span> = ET.SubElement(__FATHER, <span class="string">&quot;next&quot;</span>)</span><br><span class="line">    __FATHER = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_type</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;Goertek_&quot;</span>+t&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_name</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>:n&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_field</span>(<span class="params">b, n, t</span>):</span><br><span class="line">    field = ET.SubElement(b, <span class="string">&quot;field&quot;</span>, _name(n))</span><br><span class="line">    field.text = <span class="built_in">str</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_block</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> __FATHER</span><br><span class="line">    <span class="keyword">if</span> __FATHER.tag != <span class="string">&quot;next&quot;</span> <span class="keyword">and</span> __FATHER.tag != <span class="string">&quot;statement&quot;</span>:</span><br><span class="line">        _<span class="built_in">next</span>()</span><br><span class="line">    b = ET.SubElement(__FATHER, <span class="string">&quot;block&quot;</span>, _<span class="built_in">type</span>(n))</span><br><span class="line">    __FATHER = b</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">StartTime</span>(<span class="params">time = <span class="string">&quot;00:00&quot;</span>, color = <span class="string">&quot;#cccccc&quot;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> __FATHER, __STATEMENT</span><br><span class="line">    b = _block(<span class="string">&quot;StartTime&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;time&quot;</span>, time)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line">    statement = ET.SubElement(b, <span class="string">&quot;statement&quot;</span>, _name(<span class="string">&quot;functionIntit&quot;</span>))</span><br><span class="line">    __STATEMENT = b</span><br><span class="line">    __FATHER = statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">End</span>():</span><br><span class="line">    <span class="keyword">global</span> __FATHER</span><br><span class="line">    <span class="built_in">next</span> = ET.SubElement(__STATEMENT, <span class="string">&quot;next&quot;</span>)</span><br><span class="line">    __FATHER = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">UnLock</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    解锁</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">global</span> __FATHER</span><br><span class="line">    b = ET.SubElement(__FATHER, <span class="string">&quot;block&quot;</span>, _<span class="built_in">type</span>(<span class="string">&quot;UnLock&quot;</span>))</span><br><span class="line">    __FATHER = b</span><br><span class="line">Arm = UnLock</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Lock</span>():</span><br><span class="line">    _block(<span class="string">&quot;Lock&quot;</span>)</span><br><span class="line">Disarm = Lock</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delay</span>(<span class="params">time = <span class="number">1000</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;Delay&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;delay&quot;</span>, <span class="number">0</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;time&quot;</span>, time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Horizontal</span>(<span class="params">hSpeed = <span class="number">100</span>, hAcc = <span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    水平</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">global</span> __hAcc, __hSpeed</span><br><span class="line">    b = _block(<span class="string">&quot;Horizontal&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;hSpeed&quot;</span>, hSpeed)</span><br><span class="line">    _field(b, <span class="string">&quot;hAcc&quot;</span>, hAcc)</span><br><span class="line">    __hSpeed = hSpeed</span><br><span class="line">    __hAcc = hAcc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Vertical</span>(<span class="params">vSpeed = <span class="number">100</span>, vAcc = <span class="number">100</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;Vertical&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;vSpeed&quot;</span>, vSpeed)</span><br><span class="line">    _field(b, <span class="string">&quot;vAcc&quot;</span>, vAcc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AngularVelocity</span>(<span class="params">w</span>):</span><br><span class="line">    b = _block(<span class="string">&quot;AngularVelocity&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;w&quot;</span>, w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TakeOff</span>(<span class="params">alt=<span class="number">120</span></span>):</span><br><span class="line">    <span class="keyword">global</span> POS</span><br><span class="line">    b = _block(<span class="string">&quot;TakeOff&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;alt&quot;</span>, alt)</span><br><span class="line">    POS[<span class="number">2</span>] = alt</span><br><span class="line">Takeoff = TakeOff</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Land</span>():</span><br><span class="line">    b = _block(<span class="string">&quot;Land&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RelativePosition</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">global</span> POS</span><br><span class="line">    b = _block(<span class="string">&quot;Move&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;X&quot;</span>, x)</span><br><span class="line">    _field(b, <span class="string">&quot;Y&quot;</span>, y)</span><br><span class="line">    _field(b, <span class="string">&quot;Z&quot;</span>, z)</span><br><span class="line">    POS[<span class="number">0</span>] += x</span><br><span class="line">    POS[<span class="number">1</span>] += y</span><br><span class="line">    POS[<span class="number">2</span>] += z</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MoveToCoord</span>(<span class="params">x, y, z = <span class="number">120</span></span>):</span><br><span class="line">    <span class="keyword">global</span> POS</span><br><span class="line">    b = _block(<span class="string">&quot;MoveToCoord&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;X&quot;</span>, x)</span><br><span class="line">    _field(b, <span class="string">&quot;Y&quot;</span>, y)</span><br><span class="line">    _field(b, <span class="string">&quot;Z&quot;</span>, z)</span><br><span class="line">    POS = [x, y, z]</span><br><span class="line">Move = MoveToCoord</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MoveToCoord_AutoDelay</span>(<span class="params">x, y, z = <span class="number">120</span>, time = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> POS</span><br><span class="line">    b = _block(<span class="string">&quot;MoveToCoord&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;X&quot;</span>, x)</span><br><span class="line">    _field(b, <span class="string">&quot;Y&quot;</span>, y)</span><br><span class="line">    _field(b, <span class="string">&quot;Z&quot;</span>, z)</span><br><span class="line">    v = __hSpeed</span><br><span class="line">    a = __hAcc</span><br><span class="line">    d = math.sqrt((x - POS[<span class="number">0</span>])**<span class="number">2</span> + (y - POS[<span class="number">1</span>])**<span class="number">2</span> + (z - POS[<span class="number">2</span>])**<span class="number">2</span>)</span><br><span class="line">    t = v / a</span><br><span class="line">    D = (v**<span class="number">2</span>) / (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">if</span> d &gt; <span class="number">2</span> * D:</span><br><span class="line">        T = <span class="number">2</span> * t + (d - <span class="number">2</span> * D) / v</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        T = <span class="number">2</span> * math.sqrt(d / a)</span><br><span class="line">    T = <span class="built_in">round</span>(T * <span class="number">1000</span>)</span><br><span class="line">    d = <span class="built_in">round</span>(d)</span><br><span class="line">    T = T + time</span><br><span class="line">    Delay(T)</span><br><span class="line">    POS = [x, y, z]</span><br><span class="line">    <span class="keyword">return</span> T, d</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Circle</span>(<span class="params">n, r, <span class="built_in">dir</span> = <span class="number">1</span></span>):</span><br><span class="line">    c = []</span><br><span class="line">    angle = <span class="built_in">dir</span> * <span class="number">2</span> * math.pi / n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        theta = i * angle</span><br><span class="line">        p = []</span><br><span class="line">        p.append(<span class="built_in">round</span>(r * math.cos(theta)))</span><br><span class="line">        p.append(<span class="built_in">round</span>(r * math.sin(theta)))</span><br><span class="line">        c.append(p)</span><br><span class="line">    c.append([r, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Move_Circle</span>(<span class="params">x, y, z = <span class="number">120</span>, n = <span class="number">8</span>, r = <span class="number">100</span>, d = <span class="number">1400</span>, <span class="built_in">dir</span> = <span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    dir: 1 or -1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> [dx, dy] <span class="keyword">in</span> Circle(n, r, <span class="built_in">dir</span>):</span><br><span class="line">        MoveToCoord(x + dx, y + dy, z)</span><br><span class="line">        Delay(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Move_Circle_AutoDelay</span>(<span class="params">x, y, z = <span class="number">120</span>, n = <span class="number">8</span>, r = <span class="number">100</span>, <span class="built_in">dir</span> = <span class="number">1</span>, time = <span class="number">0</span></span>):</span><br><span class="line">    tot = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> [dx, dy] <span class="keyword">in</span> Circle(n, r, <span class="built_in">dir</span>):</span><br><span class="line">        tot += MoveToCoord_AutoDelay(x + dx, y + dy, z, time)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> tot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedAllOn</span>(<span class="params">color=<span class="string">&quot;#ffffff&quot;</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedAllOn&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">WaypointRGB</span>(<span class="params">x, y, z, color</span>):</span><br><span class="line">    MoveToCoord(x, y, z)</span><br><span class="line">    LedAllOn(color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedAllOff</span>():</span><br><span class="line">    _block(<span class="string">&quot;LedAllOff&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedBodyOn</span>(<span class="params">color=<span class="string">&quot;#ffffff&quot;</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedBodyOn&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedAllBreath</span>(<span class="params">color, delay = <span class="number">1000</span>, dur = <span class="number">1000</span>, bright = <span class="number">1</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedAllBreath&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;dur&quot;</span>, dur)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line">    _field(b, <span class="string">&quot;bright&quot;</span>, bright)</span><br><span class="line">    _field(b, <span class="string">&quot;delay&quot;</span>, delay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedBodyBreath</span>(<span class="params">color, delay = <span class="number">1000</span>, dur = <span class="number">1000</span>, bright = <span class="number">1</span></span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedBodyBreath&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;dur&quot;</span>, dur)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line">    _field(b, <span class="string">&quot;bright&quot;</span>, bright)</span><br><span class="line">    _field(b, <span class="string">&quot;delay&quot;</span>, delay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedBodyBlink</span>(<span class="params">color, dur, delay, bright</span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedBodyBlink&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;color&quot;</span>, color)</span><br><span class="line">    _field(b, <span class="string">&quot;birght&quot;</span>, bright)</span><br><span class="line">    _field(b, <span class="string">&quot;dur&quot;</span>, dur)</span><br><span class="line">    _field(b, <span class="string">&quot;delay&quot;</span>, delay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedDroneArmHorse</span>(<span class="params">color1, color2, color3, color4, clock, delay</span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedDroneArmHorse&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;color1&quot;</span>, color1)</span><br><span class="line">    _field(b, <span class="string">&quot;color2&quot;</span>, color2)</span><br><span class="line">    _field(b, <span class="string">&quot;color3&quot;</span>, color3)</span><br><span class="line">    _field(b, <span class="string">&quot;color4&quot;</span>, color4)</span><br><span class="line">    _field(b, <span class="string">&quot;clock&quot;</span>, clock)</span><br><span class="line">    _field(b, <span class="string">&quot;delay&quot;</span>, delay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LedDroneArmPulse</span>(<span class="params">color1, color2, color3, color4, frequency</span>):</span><br><span class="line">    b = _block(<span class="string">&quot;LedDroneArmPulse&quot;</span>)</span><br><span class="line">    _field(b, <span class="string">&quot;color1&quot;</span>, color1)</span><br><span class="line">    _field(b, <span class="string">&quot;color2&quot;</span>, color2)</span><br><span class="line">    _field(b, <span class="string">&quot;color3&quot;</span>, color3)</span><br><span class="line">    _field(b, <span class="string">&quot;color4&quot;</span>, color4)</span><br><span class="line">    _field(b, <span class="string">&quot;frequency&quot;</span>, frequency)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">finish</span>():</span><br><span class="line">    <span class="keyword">global</span> __DRONE_NUM</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> TEST:</span><br><span class="line">        str_xml = <span class="built_in">str</span>(ET.tostring(__XML, encoding=<span class="string">&#x27;utf-8&#x27;</span>, method=<span class="string">&quot;xml&quot;</span>))</span><br><span class="line">        __WEBXML.clear()</span><br><span class="line">        __WEBXML.text = str_xml[<span class="number">2</span>: (<span class="built_in">len</span>(str_xml) - <span class="number">1</span>)]</span><br><span class="line">    __DRONE_NUM += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>():</span><br><span class="line">    rough_str = ET.tostring(root, encoding=<span class="string">&#x27;utf-8&#x27;</span>, xml_declaration=<span class="literal">True</span>)</span><br><span class="line">    reparsed = minidom.parseString(rough_str)</span><br><span class="line">    new_str = reparsed.toprettyxml(indent=<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;.vlfii&#x27;</span>.<span class="built_in">format</span>(FILE), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(new_str)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    DRONE = [</span><br><span class="line">        [<span class="number">160</span>, <span class="number">160</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">    ]</span><br><span class="line">    start()</span><br><span class="line">    StartTime()</span><br><span class="line">    UnLock()</span><br><span class="line">    Delay()</span><br><span class="line">    Horizontal()</span><br><span class="line">    Vertical()</span><br><span class="line">    TakeOff()</span><br><span class="line">    MoveToCoord(<span class="number">260</span>, <span class="number">160</span>)</span><br><span class="line">    Delay(<span class="number">2000</span>)</span><br><span class="line">    Land()</span><br><span class="line">    Delay(<span class="number">2500</span>)</span><br><span class="line">    End()</span><br><span class="line">    StartTime()</span><br><span class="line">    LedBodyOn()</span><br><span class="line">    LedAllOn()</span><br><span class="line">    Lock()</span><br><span class="line">    finish()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCB-NFC</title>
      <link href="/2023/07/18/PCB-NFC/"/>
      <url>/2023/07/18/PCB-NFC/</url>
      
        <content type="html"><![CDATA[<h1 id="台州路桥中学pcb-nfc校园卡">台州路桥中学PCB-NFC校园卡</h1><blockquote><h2 id="erayes制作">EraYes制作</h2><p>按照路中地图绘制，忽略部分细节，但保留了大部分代表性建筑，画了nfc线圈，焊接ic卡后基本可实现校园卡全部功能。<br>正面电路都是装饰，无实际作用。背面是nfc线圈和个性化自定义空间<br>工程内提供了空卡、线圈、地图、带注记的地图和我定制的个性化卡供参考<br>无原理，地图就是原理</p></blockquote><h2 id="结束bb">结束BB</h2><p>前面都是写给别人看的，这里是写给自己人的</p><p>最初想改造校卡是半学期前的事了，那时候就买来电烙铁之类的准备动手，再一个星期后我就把自己的校卡拆了，然后就搞坏了。。。</p><p>后来这件事就又搁置了一段时间，知道最近在b站上刷到了用PCB板改装校卡的视频，恰好最近又在玩开发板之类的，这种DIY就深深地吸引了我，然后就花了整整两天来画这张地图。</p><h3 id="说说这张地图的漏洞吧"><strong>说说这张地图的漏洞吧</strong></h3><blockquote><ul><li>我当初画的时候忘记画钟楼了(emm。但后来想到钟楼的占地面积极小，而且板子也不可以凸出来一块，所以就舍弃掉了。</li><li>然后就是食堂画小了，因为把新男舍的比例搞错了，而女舍又是直接复制的男舍，所以就挤得食堂没地方了~~</li><li>食堂旁边的一排电阻其实是车啦</li><li>还有就是操场前，篮球场边，那块一直拆了建、建了拆的地方我也不知道是干什么的，所以没画😑</li><li>之所以把名字写在滨海大池塘就是因为就那里最空，并不是相当青蛙😶</li><li>别问我科技楼为什么这么丑，以为官方地图更丑🙄</li></ul></blockquote><p><strong>吐槽一句</strong>，虽然不一定看得出来，但最搞人心态的是大礼堂那块的同心圆和圆扇，最然板子打印出来几乎就看不清了，但我细画了好久，那真的折磨了我好久</p><p><strong>再吐槽一句</strong>，虽然地图上男舍后面是开放的，但我们都知道那怎么回事，所以我特地封上了。</p><h3 id="关于背面">关于背面</h3><p>背面特地预留的所以空间就是个性自定义用的，你当然可以像我一样画，有一个细节是我C++代码的头文件是万能头，那懂得就都懂了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;</span><br><span class="line">    <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终于到货了">终于到货了</h3><p>我本来一直盯着物流消息，但消息一直显示在珠海揽收，直到突然收到丰巢的消息才知道原理嘉立创最新物流信息是显示在底下的，我还傻傻得一直看顶上。。。。一直以为它在珠海。。。<br><strong>嘿嘿，高兴</strong><br><img src="https://cdn.jsdelivr.net/gh/ERA-YES/PicBed@main/PBC-NFC/2.jpg" alt=""></p><h3 id="焊接">焊接</h3><p>虽然说玩开发板是焊接过ic芯片，但这种芯片确实很难贴的严密，而且我还烫到手了😥，起了个大水泡。</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://oshwhub.com/era-yes/tai-zhou-lu-qiao-zhong-xue-pcb-nfc-xiao-yuan-ka">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">嘉立创开源链接 </div>            <div class="tag-link-sitename"> 开源在嘉立创，但好像没过审 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/ERA-YES/PCB-NFC">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Github开源链接 </div>            <div class="tag-link-sitename"> 所以我也在Github开源了 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pro.lceda.cn/editor#id=a84dde7ac0c249679c607b19cff67770">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">嘉立创在线编辑器] </div>            <div class="tag-link-sitename"> 好在在线编辑可以看 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="修改">修改</h3><p>焊完后出大BUG了，正面过孔的线没连，飞线也没连上，这几张卡就相当于废了，吓得我连滚带爬去改了板子，现在也不用焊盘了，而是做一个金属化过孔放芯片，这样能大大减小焊接的难度而且也更美观，毕竟凹下去一块总比吐出来一块感觉要好。</p><p><img src="https://github.com/ERA-YES/-PCB-NFC-/blob/main/%E5%B0%81%E9%9D%A2.png?raw=true" alt=""><br><img src="https://github.com/ERA-YES/-PCB-NFC-/blob/main/%E5%9C%B0%E5%9B%BE%E5%8E%9F%E5%9B%BE.jpg?raw=true" alt=""><br><img src="https://github.com/ERA-YES/-PCB-NFC-/blob/main/%E6%A0%A1%E5%BE%BD.jpg?raw=true" alt="校徽"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记</title>
      <link href="/2023/07/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="读书笔记">读书笔记</h1><blockquote><p>种树最好的时间是十年前，其次是现在</p></blockquote><h2 id="简介：">简介：</h2><ul><li>我决定从今天开始记录我读书的过程（也可能是从几天前），记录我读的<code>书</code>，书的相关<code>信息</code>，我的读书<code>方法</code>，一些<code>好句</code>，我的<code>心得</code>。</li></ul><h3 id="to-read-list">To-read List</h3><blockquote><p>遇到好书不应该等着,而应该记下来:</p></blockquote><p><strong>Reading</strong>：《乌合之众》 - By Gustave Le Bon<br><strong>我们始终有一种错觉，以为我们的感情源自于我们自己的内心。</strong></p><p><strong>&lt;!–More are coming–!&gt;</strong></p><h3 id="记录模板">记录模板:</h3><blockquote><p>《这是一本书》<br>阅读时间：<code>过过去-过去</code><br>出版社：<code>一家出版书的出版社</code><br>作者： <code>一个写作的作者</code><br>(译者：<code>翻译文章的人</code>)<br>名句记录</p><ul><li>1</li><li>2</li><li>3</li></ul><p>读后感</p><ul><li>这里应有100字</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023.5 路桥中学高一期末程序素养检测</title>
      <link href="/2023/07/13/2023.5%20%E8%B7%AF%E6%A1%A5%E4%B8%AD%E5%AD%A6%E9%AB%98%E4%B8%80%E6%9C%9F%E6%9C%AB%E7%A8%8B%E5%BA%8F%E7%B4%A0%E5%85%BB%E6%A3%80%E6%B5%8B/"/>
      <url>/2023/07/13/2023.5%20%E8%B7%AF%E6%A1%A5%E4%B8%AD%E5%AD%A6%E9%AB%98%E4%B8%80%E6%9C%9F%E6%9C%AB%E7%A8%8B%E5%BA%8F%E7%B4%A0%E5%85%BB%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="参考答案-个人编写">参考答案（个人编写）</h1><h3 id="a">A</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split( )) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())  - a + b) </span><br></pre></td></tr></table></figure><h3 id="b">B</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2lf&quot;</span> %(<span class="built_in">float</span>(<span class="built_in">input</span>()) * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32</span>))</span><br></pre></td></tr></table></figure><h3 id="c">C</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">3</span>:</span><br><span class="line">    a = <span class="built_in">int</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(((a + <span class="number">1</span> - <span class="number">3</span>) * <span class="number">2</span> + <span class="number">10</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="d">D</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(a)))</span><br></pre></td></tr></table></figure><h3 id="e">E</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a, b, operator = <span class="built_in">input</span>().split()</span><br><span class="line">a, b = <span class="built_in">int</span>(a), <span class="built_in">int</span>(b)</span><br><span class="line"><span class="keyword">if</span> operator == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">elif</span> operator == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="keyword">elif</span> operator == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="keyword">elif</span> operator == <span class="string">&#x27;//&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a // b)</span><br><span class="line"><span class="keyword">elif</span> operator == <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(a % b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="f">F</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line">cities = &#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;Hangzhou&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;Ningbo&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;Wenzhou&#x27;</span>, <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;Huzhou&#x27;</span>, <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;Jiaxing&#x27;</span>, <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;Jinhua&#x27;</span>, <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;Quzhou&#x27;</span>, <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;Taizhou&#x27;</span>, <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;Taizhou&#x27;</span>, <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;Zhoushan&#x27;</span>, <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;Lishui&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> a[<span class="number">0</span>] <span class="keyword">in</span> cities:</span><br><span class="line">    <span class="built_in">print</span>(cities[a[<span class="number">0</span>]])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Input error&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="g">G</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">len</span>(a) // <span class="number">2</span> + <span class="built_in">len</span>(a) % <span class="number">2</span></span><br><span class="line">c = a[:b]</span><br><span class="line">d = a[b - <span class="built_in">len</span>(a) % <span class="number">2</span>:<span class="built_in">len</span>(a)]</span><br><span class="line">d.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span> <span class="keyword">if</span> c == d <span class="keyword">else</span> <span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="h">H</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">a %= b</span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">    a *= <span class="number">10</span></span><br><span class="line">    ans += <span class="built_in">str</span>(a // b)</span><br><span class="line">    a %= b</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h3 id="i">I</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, (<span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))))</span><br><span class="line">ssum = <span class="built_in">sum</span>(a)</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2lf %.2lf&quot;</span>%(ssum / <span class="built_in">len</span>(a), a[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h3 id="j">J</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;datetime&#x27;</span>).datetime.strptime(<span class="built_in">input</span>(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>).timetuple().tm_yday)</span><br></pre></td></tr></table></figure><h3 id="k">K</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_perfect_number</span>(<span class="params">n</span>):</span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            m += i + n // i</span><br><span class="line">    <span class="keyword">return</span> m == n</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> is_perfect_number(n):</span><br><span class="line">        <span class="built_in">print</span>(n) </span><br></pre></td></tr></table></figure><h3 id="l">L</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    b = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        b += <span class="built_in">str</span>(j)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        b += <span class="built_in">str</span>(j)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span> * (n-i) + b)</span><br></pre></td></tr></table></figure><h3 id="m">M</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">is_prime = [<span class="literal">True</span>] * (n+<span class="number">1</span>)</span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i*i, n+<span class="number">1</span>, i):</span><br><span class="line">            is_prime[j] = <span class="literal">False</span></span><br><span class="line">ans = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> is_prime <span class="keyword">if</span> x)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h3 id="n">N</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    b = b + <span class="built_in">int</span>(<span class="built_in">str</span>(a)*i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="o">O</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(c.isupper() <span class="keyword">for</span> c <span class="keyword">in</span> s):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(c.islower() <span class="keyword">for</span> c <span class="keyword">in</span> s):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(c.isdigit() <span class="keyword">for</span> c <span class="keyword">in</span> s):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(c <span class="keyword">in</span> [<span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;^&#x27;</span>] <span class="keyword">for</span> c <span class="keyword">in</span> s):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= <span class="number">8</span> <span class="keyword">and</span> <span class="built_in">len</span>(s) &lt;= <span class="number">16</span> <span class="keyword">and</span> <span class="built_in">sum</span> &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;YES&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NO&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KaTeX</title>
      <link href="/2023/07/13/KaTeX/"/>
      <url>/2023/07/13/KaTeX/</url>
      
        <content type="html"><![CDATA[<h1 id="katex语法介绍">KaTeX语法介绍</h1><p>KaTeX是一个流行的用于Web上高质量数学排版的渲染库。它与LaTeX语法兼容，但具有自己的一套渲染方程式的规则。下面是一份常用的KaTeX语法指南。</p><h2 id="基础语法">基础语法</h2><p>要使用KaTeX渲染方程式，您可以使用两个美元符号把方程式括起来，就像这样：<br><code>$f(x) = x^2 - 3x + 5$</code></p><p>这将渲染为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">f(x) = x^2 - 3x + 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span></p><h2 id="基本数学运算">基本数学运算</h2><p>KaTeX支持广泛的数学运算，包括：</p><ul><li>指数： <code>x^n</code> 或 <code>x^&#123;n&#125;</code></li><li>下标： <code>x_n</code> 或 <code>x_&#123;n&#125;</code></li><li>分数： <code>\frac&#123;numerator&#125;&#123;denominator&#125;</code> ，或可选 <code>\dfrac</code> 以获得一个更大的分式<br>例如：<br><code>$x^&#123;2n&#125;$ $C_&#123;n-1&#125;$ $\frac&#123;3&#125;&#123;4&#125;$</code></li></ul><p>它们将分别渲染为：</p><table><thead><tr><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">x^{2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>3</mn><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{3}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></th></tr></thead><tbody></tbody></table><details><summary>点击查看代码</summary><h2 id="希腊字母">希腊字母</h2><p>KaTeX支持许多希腊字母，包括：</p><ul><li>Alpha： <code>\alpha</code></li><li>Beta:  <code>\beta</code></li><li>Gamma:  <code>\gamma</code>  ( <code>\Gamma</code> 为大写字母)</li><li>Delta:  <code>\delta</code>  ( <code>\Delta</code> 为大写字母)</li><li>Epsilon:  <code>\epsilon</code></li><li>Zeta： <code>\zeta</code></li><li>Eta:  <code>\eta</code></li><li>Theta:  <code>\theta</code>  ( <code>\Theta</code> 为大写字母)</li><li>Iota:  <code>\iota</code></li><li>Kappa:  <code>\kappa</code></li><li>Lambda:  <code>\lambda</code>  ( <code>\Lambda</code> 为大写字母)</li><li>Mu:  <code>\mu</code></li><li>Nu:  <code>\nu</code></li><li>Xi:  <code>\xi</code>  ( <code>\Xi</code> 为大写字母)</li><li>Omicron:  <code>\omicron</code></li><li>Pi:  <code>\pi</code>  ( <code>\Pi</code> 为大写字母)</li><li>Rho:  <code>\rho</code></li><li>Sigma:  <code>\sigma</code>  ( <code>\Sigma</code> 为大写字母)</li><li>Tau:  <code>\tau</code></li><li>Upsilon:  <code>\upsilon</code>  ( <code>\Upsilon</code> 为大写字母)</li><li>Phi:  <code>\phi</code>  ( <code>\Phi</code> 为大写字母)</li><li>Chi:  <code>\chi</code></li><li>Psi:  <code>\psi</code>  ( <code>\Psi</code> 为大写字母)</li><li>Omega:  <code>\omega</code>  ( <code>\Omega</code> 为大写字母)<br>例如：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>+</mo><mi>δ</mi><mo>=</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\gamma+\delta=\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>+</mo><mi mathvariant="normal">Θ</mi><mo>+</mo><mi>τ</mi><mo>=</mo><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\theta+\Theta+\tau=\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">Θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span><br>它们将分别渲染为：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>+</mo><mi>δ</mi><mo>=</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\gamma+\delta=\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>+</mo><mi mathvariant="normal">Θ</mi><mo>+</mo><mi>τ</mi><mo>=</mo><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\theta+\Theta+\tau=\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">Θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span></li></ul><h2 id="其他常见语法">其他常见语法</h2><p>除了上述语法之外，KaTeX还支持其他常见的数学运算符和语法，例如：</p><ul><li>根号： <code>\sqrt</code></li><li>积分符号： <code>\int</code></li><li>和符号： <code>\sum</code></li><li>极限符号： <code>\lim</code></li><li>向量符号： <code>\vec</code></li><li>绝对值： <code>\lvert x \rvert</code></li><li>括号： <code>( )</code> ， <code>[ ]</code>  和  <code>&#123;\&#123;  \&#125;&#125;</code><br>例如：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mrow><mn>2</mn><mo>+</mo><msqrt><mn>2</mn></msqrt></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{2+\sqrt{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2400000000000002em;vertical-align:-0.16777999999999993em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0722200000000002em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.03222em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.16777999999999993em;"><span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><msup><mi>x</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_0^1 x^2\, dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{n=1}^{\infty} 2^{-n} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></msub><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim_{x \to 0} \frac{\sin x}{x} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.206502em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.861502em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">s</span><span class="mtight">i</span><span class="mtight">n</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">∣</mo><mi>a</mi><mo stretchy="false">∣</mo><mo stretchy="false">∣</mo><mi>b</mi><mo stretchy="false">∣</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\vec{a} \cdot \vec{b} = \lvert a \rvert \lvert b \rvert \cos \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord mathdefault">a</span><span class="mclose">∣</span><span class="mopen">∣</span><span class="mord mathdefault">b</span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>a</mi><mi>b</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(a+b)^2=a^2+2ab+b^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a+b,c+d]=[a,c]+[a,d]+[b,c]+[b,d]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span><br>它们将分别渲染为：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mrow><mn>2</mn><mo>+</mo><msqrt><mn>2</mn></msqrt></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{2+\sqrt{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2400000000000002em;vertical-align:-0.16777999999999993em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0722200000000002em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span><span style="top:-3.03222em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.16777999999999993em;"><span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><msup><mi>x</mi><mn>2</mn></msup><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_0^1 x^2\, dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></msubsup><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{n=1}^{\infty} 2^{-n} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></msub><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim_{x \to 0} \frac{\sin x}{x} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.206502em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.861502em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">s</span><span class="mtight">i</span><span class="mtight">n</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">∣</mo><mi>a</mi><mo stretchy="false">∣</mo><mo stretchy="false">∣</mo><mi>b</mi><mo stretchy="false">∣</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\vec{a} \cdot \vec{b} = \lvert a \rvert \lvert b \rvert \cos \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord mathdefault">a</span><span class="mclose">∣</span><span class="mopen">∣</span><span class="mord mathdefault">b</span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>a</mi><mi>b</mi><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(a+b)^2=a^2+2ab+b^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a+b,c+d]=[a,c]+[a,d]+[b,c]+[b,d]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span></li></ul></details>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>datetime库</title>
      <link href="/2023/07/13/datetime%E5%BA%93/"/>
      <url>/2023/07/13/datetime%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="python-datetime库">Python datetime库</h1><ul><li>datetime是Python内置的一个处理日期和时间的标准库，可以轻松处理日期和时间，也可以进行日期和时间的格式化操作。下面是一些datetime库中常用的方法：</li></ul><blockquote><p>datetime.date：返回表示日期的对象。<br>datetime.time：返回表示时间的对象。<br>datetime.datetime：返回日期和时间的对象。<br>datetime.timedelta：表示两个日期或时间之间的差异（例如，两个日期之间的天数）。<br>datetime.strptime()：把格式化的字符串转换为日期对象。<br>datetime.strftime()：把日期对象格式化为字符串。<br>datetime.timetuple():返回一个 time.struct_time对象，具有包含九个元素的命名元组接口。</p></blockquote><h3 id="time-struct-time-对象中存在以下值：">time.struct_time 对象中存在以下值：</h3><table><thead><tr><th>索引</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>0</td><td>tm_year</td><td>(例如，1993)</td></tr><tr><td>1</td><td>tm_mon</td><td>范围 [1, 12)</td></tr><tr><td>2</td><td>tm_mday</td><td>范围 [1, 31)</td></tr><tr><td>3</td><td>tm_hour</td><td>范围 [0, 23)</td></tr><tr><td>4</td><td>tm_min</td><td>范围 [0, 59)</td></tr><tr><td>5</td><td>tm_sec</td><td>范围 [0, 61)</td></tr><tr><td>6</td><td>tm_wday</td><td>范围 [0, 6)，星期一为 0</td></tr><tr><td>7</td><td>tm_yday</td><td>范围 [1, 366)</td></tr><tr><td>8</td><td>tm_isdst</td><td>0、1 或 -1</td></tr></tbody></table><h3 id="以下代码示例展示了如何使用datetime库：">以下代码示例展示了如何使用datetime库：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 获取当前时间并打印</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前时间为：&quot;</span>, now)</span><br><span class="line"><span class="comment"># 创建一个表示指定日期和时间的datetime对象</span></span><br><span class="line">d = datetime.datetime(<span class="number">2021</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;指定的日期和时间为：&quot;</span>, d)</span><br><span class="line"><span class="comment"># 获取两个日期之间的差异</span></span><br><span class="line">delta = datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">next_week = now + delta</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一周后的时间为：&quot;</span>, next_week)</span><br><span class="line"><span class="comment"># 把字符串转换为日期对象</span></span><br><span class="line">date_string = <span class="string">&quot;2022-01-01&quot;</span></span><br><span class="line">date_object = datetime.datetime.strptime(date_string, <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的日期为：&quot;</span>, date_object)</span><br><span class="line"><span class="comment"># 把日期对象转换为字符串</span></span><br><span class="line">date_str = date_object.strftime(<span class="string">&quot;%d/%m/%Y&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的字符串为：&quot;</span>, date_str)</span><br></pre></td></tr></table></figure><blockquote><p>输出为</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前时间为： 2023-05-24 19:51:43.019975</span><br><span class="line">指定的日期和时间为： 2021-10-12 15:00:00</span><br><span class="line">一周后的时间为： 2023-05-31 19:51:43.019975</span><br><span class="line">转换后的日期为： 2022-01-01 00:00:00</span><br><span class="line">转换后的字符串为： 01/01/2022</span><br></pre></td></tr></table></figure><p>###例题讲解<br><strong>题目描述</strong><br><code>输入某一年的日期，输出该天是本年的第多少天。</code><br><strong>输入</strong><br><code>输入一行，表示某年的日期。</code><br><strong>输出</strong><br><code>输出一个正整数，表示这一天是该年的第几天。</code><br><strong>样例输入</strong><br><code>2023-05-22</code><br><strong>样例输出</strong><br><code>142</code><br>###题解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">a=<span class="built_in">input</span>().strip()</span><br><span class="line">d=datetime.strptime(a,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">ans=d.timetuple().tm_yday</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><ul><li>当然，运用__import__函数我们可以很轻易地压行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;datetime&#x27;</span>).datetime.strptime(<span class="built_in">input</span>(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>).timetuple().tm_yday)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template模板</title>
      <link href="/2023/07/13/template%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/07/13/template%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>#C++ 模板</p><blockquote><p>模板是<code>泛型编程</code>的基础，<code>泛型编程</code>即以一种独立于<code>任何特定类型</code>的方式编写代码。</p></blockquote><p>##函数模板</p><blockquote><p><strong>模板函数定义的一般形式如下所示：</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; ret-type func-<span class="built_in">name</span>(parameter list)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 函数的主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，<code>type</code> 是函数所使用的数据类型的占位符名称。</p><p>###实例</p><blockquote><p>下面是函数模板的实例，返回两个数中的最大值：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="type">const</span>&amp; <span class="title">Max</span> <span class="params">(T <span class="type">const</span>&amp; a, T <span class="type">const</span>&amp; b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">39</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(i, j) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> f1 = <span class="number">13.5</span>; </span><br><span class="line">    <span class="type">double</span> f2 = <span class="number">20.7</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(f1, f2) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    string s1 = <span class="string">&quot;Hello&quot;</span>; </span><br><span class="line">    string s2 = <span class="string">&quot;World&quot;</span>; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class="built_in">Max</span>(s1, s2) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Max(i, j): 39</span><br><span class="line">Max(f1, f2): 20.7</span><br><span class="line">Max(s1, s2): World</span><br></pre></td></tr></table></figure><h2 id="实例2">实例2</h2><blockquote><p>使用<code>template模板</code>实现的快读</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">w = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">a = s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    cout &lt;&lt; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goto语句</title>
      <link href="/2023/07/13/goto%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/07/13/goto%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>#跳转语句</p><blockquote><p><code>C语言</code>的跳转语句主要包括<code>continue</code>,<code>break</code>,<code>retuen</code>,还有就是<code>goto</code>啦</p></blockquote><p>#goto语句</p><blockquote><p><code>goto</code>语句是在所有跳转语句中最自由的一种,<br>但在大型工程和多人协作工程中并不推荐,原因就在于它<code>太过于自由</code>,会导致代码的可读性变得<code>较差</code><br>但这也无法撼动<code>goto</code>语句的地位<br>合理的使用goto会大大简化代码，并且使程序逻辑更加清晰</p></blockquote><h2 id="什么是goto语句">什么是goto语句</h2><blockquote><p><code>goto</code>,又称<code>无条件跳转语句</code>,使用goto语句可以直接跳转到label标注处,其语法为<code>goto lable;</code></p></blockquote><h2 id="示例">示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++ i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">goto</span> ERA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before ending&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ERA:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载操作符</title>
      <link href="/2023/07/13/%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2023/07/13/%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="重载操作符">重载操作符</h1><p><strong>重载操作符Operator overloading</strong>是C++中一种特殊的语法，允许我们自定义一些运算符的行为，使它们能够用于自定义的数据类型。</p><blockquote><p>例如，我们可以自定义一个加法运算符，使它能够直接对两个自定义类型的对象进行相加，而不需要额外的函数调用。这样可以使代码更加简洁、易读，并且提高了可重用性。</p></blockquote><p>C++中可以重载的运算符包括<code>算术运算符</code>、<code>关系运算符</code>、<code>逻辑运算符</code>、<code>位运算符</code>等等。<strong>需要注意的是，不能重载的运算符有:</strong></p><h6 id="作用域运算符-成员访问运算符-和-三目运算符-sizeof运算符和类型转换运算符-typeid">作用域运算符 <code>::</code>、成员访问运算符 <code>.</code>和<code>-&gt;</code>、三目运算符 <code>?:</code>、sizeof运算符和类型转换运算符 <code>typeid</code>。</h6><p>重载运算符的方法是在类中定义一个与运算符同名的函数，并在函数前加上关键字 <code>operator</code>，这样就可以对该运算符进行重载。</p><hr><h3 id="例如">例如</h3><p>重载<code>加法</code>运算符的示例代码：</p><ul><li><strong>定义</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">        Complex res;</span><br><span class="line">        res.real = real + other.real;</span><br><span class="line">        res.imag = imag + other.imag;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>主函数</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Complex c1 &#123;<span class="number">1.0</span>, <span class="number">2.0</span>&#125;;</span><br><span class="line">    Complex c2 &#123;<span class="number">3.0</span>, <span class="number">4.0</span>&#125;;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; c3.real &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c3.imag &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在这个示例中，我们定义了一个<code>Complex类</code>，其中包含两个成员变量<code>real</code>和<code>imag</code>，表示<code>实部</code>和<code>虚部</code>。然后我们通过重载加法运算符，使得<code>Complex类型</code>的对象可以直接相加，而不需要额外的函数调用。</li><li>这里创建了两个复数对象<code>c1</code>和<code>c2</code>，并将它们相加得到一个新的复数<code>c3</code>，然后输出<code>c3</code>的实部和虚部。</li></ul><p><strong>输出结果为：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br></pre></td></tr></table></figure><hr><h4 id="再比如：">再比如：</h4><p>我们可以定义一个<code>结构体类型</code>表示这两个复数在<code>复平面</code>内的坐标，并重载加法运算符，使得我们可以直接对两个虚数进行相加。</p><h4 id="示例代码："><strong>示例代码：</strong></h4><ul><li><strong>定义结构体</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex &#123;x + other.x, y + other.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>主函数</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Complex c1 &#123;<span class="number">1.0</span>, <span class="number">2.0</span>&#125;;</span><br><span class="line">    Complex c2 &#123;<span class="number">3.0</span>, <span class="number">4.0</span>&#125;;</span><br><span class="line">    Complex c3 = c1 + c2;</span><br><span class="line">    cout &lt;&lt; c3.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c3.y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中，我们定义了两个虚数<code>v1</code>和<code>v2</code>，并将它们相加得到一个新的虚数<code>v3</code>。然后输出<code>v3</code>的分量<code>x</code>和<code>y</code>。</p><p><strong>输出结果为：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br></pre></td></tr></table></figure><hr><h4 id="当然">当然</h4><p>如果你是从<a href="https://hydro.ac/blog/18084/6426db2da50caffdd96450be">这篇博客</a>来的，那你应该希望了解这个：</p><ul><li><strong>定义结构体</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;other) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn];</span><br></pre></td></tr></table></figure><ul><li><strong>主函数</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>很显然了，</strong> 在这里我们重载了<code>小于号运算符</code>，使得Edge类型的对象可以进行比较，并且满足严格弱序关系，所以可以使用<code>sort函数</code>对<code>Edge类型</code>的对象进行排序，基本上与另外写一个<code>cmp函数</code>没有什么区别，<s>但就是很有逼格</s>，<strong>所以，原代码改为这样，效果是一样的:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> fa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x, Edge y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------</span></span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="comment">//-------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> fu = <span class="built_in">find</span>(e[i].u), fv = <span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (fu != fv)&#123;</span><br><span class="line">            fa[fu] = fv;</span><br><span class="line">            ans += e[i].w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>需要注意的是，重载运算符时，必须保证操作数中<code>至少有一个</code>是用户自定义的类型，否则编译器无法识别。此外，重载的运算符必须具有合理的语义，不能与原有的语义相悖。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索算法详解</title>
      <link href="/2023/07/13/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/07/13/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>#搜索算法</p><blockquote><p><code>搜索算法</code>，即对当前的状态空间进行枚举，以找到对于某一问题的特殊解或最优解，这类算法被广泛应用在<code>图遍历</code>，<code>寻路</code>,<code>算法竞赛</code>等之中，在信息学竞赛中，搜索算法是十分重要的一类算法，通常涉及图论和组合数学等复杂问题的求解。对于大范围的枚举，又衍生出各种各样的优化算法，通过<code>剪枝</code>、<code>压缩空间</code>、<code>双向搜索</code>等</p></blockquote><ul><li><strong>搜索寻路可视化</strong><br><i class="fa-duotone fa-door-open"><strong><a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html">传送门1</a></strong></i><br><i class="fa-duotone fa-door-open"><strong><a href="https://interactive-pathfinding.netlify.app/">传送门2</a></strong></i><br><i class="fa-duotone fa-door-open"><strong><a href="https://zaidsbaghal.github.io/Algorithm-Visualizer/">传送门3</a></strong></i></li></ul><h3 id="网页嵌入如下">网页嵌入如下</h3><details><summary>点击查看</summary><iframe src="https://www.redblobgames.com/pathfinding/a-star/introduction.html" width='100%' height='500px'></iframe><iframe src="https://interactive-pathfinding.netlify.app/"></iframe><iframe src="https://zaidsbaghal.github.io/Algorithm-Visualizer/"></iframe></details></br><blockquote><p><strong>文献</strong><br><a href="https://blog.csdn.net/v_JULY_v/article/details/6238029">A*，Dijkstra，BFS算法性能比较及A*算法的应用</a><br><a href="https://blog.csdn.net/v_JULY_v/article/details/6182419">彻底理解Dijkstra算法</a><br><a href="https://www.cnblogs.com/skywang12345/p/3711512.html">Dijkstra算法(一)之 C语言详解</a><br><a href="https://zhuanlan.zhihu.com/p/54510444">路径规划之 A* 算法</a><br><a href="https://zhuanlan.zhihu.com/p/83163899">常用距离算法详解</a></p></blockquote><h2 id="dfs">DFS</h2><ul><li>**DFS（Depth-First-Search）**即<code>深度优先搜索</code>。具体来说，DFS算法从起点开始遍历图，尽量沿着深度方向遍历下去，直到无法前进时回溯到上一个节点，继续遍历其它分支。DFS一般用于遍历或搜索一些树形结构或图结构的问题。在信息学竞赛中，DFS算法常用于解决<code>排列</code>、<code>组合</code>、<code>路径搜索</code>等一些组合问题，例如<code>全排列</code>、<code>八皇后</code>问题等。</li></ul><h2 id="bfs">BFS</h2><ul><li><strong>BFS（Breadth-First-Search</strong>）即<code>广度优先搜索</code>。BFS算法会按照层次分别访问每个节点，可以得到所有可能的路径中最短路径。BFS算法一般用于图上最短路径等问题上。在信息学竞赛中，BFS算法常用于解决图上的<code>最短路问题</code>、<code>迷宫路径</code>搜索等问题。</li></ul><h2 id="dijkstra">Dijkstra</h2><ul><li><strong>Dijkstra</strong>可以看成时加权的BFS，在引入权值之后，算法在拓展时就可以考虑到不同的收益带来的效果，这图论搜索时，求解有向图和无向图的最短路径问题时就相对很优秀了，实际上在实际应用中，Dijkstra算法常用于解决<code>网络路由最短路径问题</code>、<code>制作地图应用程序</code>、<code>优化电路设计</code>、以及示例中的<code>游戏寻路</code>等问题。</li><li>但是相对的，在权值都为1时，Dijkstra就和BFS差不多了</li></ul><p><img src="https://img2023.cnblogs.com/blog/3163018/202306/3163018-20230606102843486-1635604432.gif" alt="动画1"><br><img src="https://img2023.cnblogs.com/blog/3163018/202306/3163018-20230606102920011-2110401761.gif" alt="动画2"></p><h2 id="a">A*</h2><ul><li>**A***是一种基于Dijkstra<code>启发式搜索算法</code>，能够有效地搜索最短路径，其目标是最小化当前路径的代价，同时通过加入启发函数剪枝掉明显不优的状态节点，从而尽可能降低搜索的时间复杂度。A<em>算法需要启发式函数的支持，因此在对路径搜索灵活度要求比较高的情况下，可以使用A</em>算法。</li><li><strong>启发函数</strong>时A<em>算法中最重要的一部分，启发函数的选择直接关系到A</em>算法的效率和结果。它是一种能够对当前状态节点与目标状态距离进行有效估算的，用于衡量当前节点在搜索过程中离目标节点还有多远，从而选择合适的路径。</li><li><ul><li>需要注意的是，当h(x)为0时，A<em>算法退化为Dijkstra算法，而当h(x)不为0时，A</em>算法具有更好的搜索效率。</li></ul></li></ul><h3 id="启发函数">启发函数</h3><ul><li><p>**<a href="https://oi-wiki.org/search/astar/">OI wiki</a>**中这样介绍，定义起点<code>s</code>，终点<code>t</code>，从起点（初始状态）开始的距离函数<code>g(x)</code>，到终点（最终状态）的距离函数<code>h(x)</code>，<code>h*(x)</code>，以及每个点的估价函数<code>f(x)=g(x)+h(x)</code>。</p></li><li><p>但说实话，这些确实比较抽象，而且OI wiki讲的还不够详细，下面我来讲讲我的理解：</p></li><li><ul><li><em><strong>f(x) = g(x) + h(x)</strong></em></li></ul></li><li><ul><li><strong>综合评价函数f(x)</strong> 其实就是当前状态的<code>地位或效益</code>，这个值更具题意当然总是越小越好，但在一些较抽象的数论题里，它也许还能代表<code>操作的价值</code>、<code>目前的做法和接下来的做法</code>，当然，这还是抽象，我们接着往下看</li></ul></li><li><ul><li><strong>路径长度g(x)</strong> 最好理解，其实就是<code>走过的步数</code>、<code>进行过的操作</code>，这个值用以储存其实状态到当前状态的路径长度</li></ul></li><li><ul><li><strong>启发函数估价函数h(x)</strong> 表示当前状态x到达目标状态的最短路径估计值，在图论里，它可以是<code>节点数和权值</code>，在八数码里，它则是与目标码不同的数字的<code>个数</code></li></ul></li><li><p>在<a href="https://www.gamedev.net/reference/articles/article2003.asp">链接</a>中，你可以很清楚的看到在地图里这启发函数是如何运行的。这是一篇很好的文章，我也是在<code>CSDN</code>疯狂<code>“转载”</code> <code>包浆</code>中发现的</p></li></ul><h3 id="关于距离">关于距离</h3><ul><li>在二维平面坐标系中的格点搜索问题中，选择怎样的距离尤其重要，但本人认为对于算法竞赛而言并不直接，因为大部分搜索题是图和数的关系</li><li>我也查询一些有意思的距离函数，如果感兴趣的话你可以点开来看看，因为我也很感兴趣</li></ul><details><summary>点击查看</summary><h4 id="曼哈顿距离-manhattan-distance"><strong>曼哈顿距离（Manhattan Distance)</strong></h4><p>**曼哈顿距离（Manhattan Distance)**即两点之间在网络格子上的距离，它是无法通过对角线移动到达目标点时，两点坐标差的绝对值之和，即x轴上的距离和y轴上的距离的和。在二维平面坐标系中，曼哈顿距离可以表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>x</mi></msub><mo>−</mo><msub><mi>q</mi><mi>x</mi></msub><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>y</mi></msub><mo>−</mo><msub><mi>q</mi><mi>y</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">h(p,q) = |p_x - q_x|+|p_y - q_y|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p><p>####<strong>欧几里得距离（Euclidean Distance）</strong><br>**欧几里得距离（Euclidean Distance）**则是两点之间的直线距离，它是在平面直角坐标系上连接点两点之间的线段的长度，即两点距离的平方根。在二维平面坐标系中，欧几里得距离可以表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mi>x</mi></msub><mo>−</mo><msub><mi>q</mi><mi>x</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mi>y</mi></msub><mo>−</mo><msub><mi>q</mi><mi>y</mi></msub><mn>2</mn></mrow></msqrt></mrow><annotation encoding="application/x-tex">h(p,q) = \sqrt{(p_x - q_x)^2 + (p_y - q_y2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.574179em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.265821em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">2</span></span></span><span style="top:-3.225821em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.574179em;"><span></span></span></span></span></span></span></span></span></span></p><h4 id="曼哈顿距离和欧几里得距离的平均值"><strong>曼哈顿距离和欧几里得距离的平均值</strong></h4><h4 id="切比雪夫距离"><strong>切比雪夫距离</strong></h4><p>切比雪夫距离或是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi mathvariant="normal">∞</mi></msub></mrow><annotation encoding="application/x-tex">L_∞</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (无穷范数) 度量是向量空间中的一种度量，二个点之间的距离定义为其各座标数值差的最大值。<br>若二个向量或二个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>，其座标分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 及 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">q_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 则两者之间的切比雪夫距离定义如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>b</mi><mi>y</mi><mi>s</mi><mi>h</mi><mi>e</mi><mi>v</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>:</mo><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><msub><mi>q</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{Chebyshev}(p, q) := max_i(|p_i - q_i|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p><p>这也等于以下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">L_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 度量的极值：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>k</mi><mo>→</mo><mn>0</mn></mrow></munder><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mi>i</mi></msub><mo>−</mo><msub><mi>q</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow><mi>k</mi></msup><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\lim_{k\to0}(\sum_{i=1}^n{|p_i-q_i|}^k)^{1/k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.347892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7521079999999999em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>因为笔者实力有限，对于切比雪夫距离理解不够，其他有错的地方还请您见谅，您可以参阅**<a href="https://blog.nowcoder.net/n/d3761629c51649e897e7d3ff2a72763d">这篇文章</a>**</p></blockquote></details><h2 id="总结bfs-dijkstra-a">总结BFS、Dijkstra、A*</h2><ul><li>总的来说，BFS算法适用于无加权图或权值相等的有加权图，Dijkstra算法适用于权值为正的有加权图，A*算法虽然时间复杂度较高，但可以更快地找到最短路径或近似最短路径，适用于一些对路径搜索灵活度和效率要求较高的情况下</li></ul><h2 id="ida">IDA*</h2><ul><li>**IDA***本质上就是A*加上了<code>迭代加深</code>的方式，每次限制深度，在每个深度上进行搜索，以尽可能地搜索所有可能的组合。与A*不同的是，它更像是DFS的一种优化，在处理较宽或无限宽的树时，A*就显得力不从心了，IDA*虽然在迭代加深时会重复多次搜索，但带来的收益也是不容小觑的，在信息学竞赛中，IDDFS算法常用于解决搜索深度未知或搜索深度很深的问题。</li></ul><h2 id="总结">总结</h2><ul><li>搜索算法是信息学竞赛中必须掌握的重要算法之一，掌握DFS、BFS等经典搜索算法，以及它们的改进算法，如IDDFS、A*等，能够帮助我们更加高效地解决各种搜索问题。在实践过程中，我们应该注重总结不同问题的模型，降低问题转化到搜索算法的复杂度，避免无效的搜索，提高搜索算法的效率。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2023/07/13/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/13/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组">树状数组</h1><p>树状数组(Binary Indexed Tree Fenwick Tree)是一种用于维护数列前缀和、区间和以及支持单点更新的数据结构。它能够在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的时间复杂度内完成这些操作，比传统的前缀和算法更具有实用价值。树状数组也常常被用于解决数据结构中的某些问题，例如求逆序对、求数列中某一个数在排序后的排名等等。</p><h2 id="基本思想">基本思想</h2><p>树状数组的核心思想是将原数列分解成若干个部分，对每一部分求出它们的和，并将这些和保存在一个数组中。数组中下标 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 保存的是数列以第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个元素结尾的、长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lowbit(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 的区间和（其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lowbit(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的最末尾的一个1所代表的数值）。这样，我们只需要利用这个数组就可以很方便地计算数列任意前缀和以及区间和了。</p><h2 id="实现细节">实现细节</h2><h3 id="初始化">初始化</h3><p>构造树状数组需要两个步骤：</p><ol><li>定义一个数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">tree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span></span></span></span>，用于保存树状数组的节点值。</li><li>将原始输入数组中的每个数加入到树状数组中。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> tree[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tree[i] += arr[i<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= n) &#123;</span><br><span class="line">            tree[j] += tree[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lowbit操作">lowbit操作</h3><p>在树状数组的实现中，需要用到一个函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lowbit(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>，它表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的最末尾的一个1所代表的数值。这个函数的实现方法比较简单，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单点查询">单点查询</h3><p>单点查询函数的实现比较简单，只需要将查询的位置不断地向前跳转，即反复减去当前位置的 lowbit 值，直到位置为0为止。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += tree[i];</span><br><span class="line">        i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间查询">区间查询</h3><p>区间查询函数是树状数组最重要的操作。通过利用前缀和计算公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>j</mi></msub><mo>−</mo><mi>s</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">sum_{i,j} = sum_j - sum_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，我们可以很容易地计算出数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 和数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的前缀和，从而计算出数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 的区间和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tree, r) - <span class="built_in">query</span>(tree, l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单点修改">单点修改</h3><p>单点修改操作需要将对应的节点值更新之后重新计算对应的每个节点的值，具体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> i, <span class="type">int</span> add, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        tree[i] += add;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>树状数组是一种非常实用的数据结构，它可以在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的时间复杂度内完成数列前缀和、区间和以及支持单点更新等操作。</p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2023/07/13/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/13/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="背包问题">背包问题</h1><blockquote><ul><li>背包问题是一类经典的优化问题，在计算机科学中有广泛的应用。</li><li>简而言之，背包问题是在有限的背包容量内，如何最大化物品的价值和数量的问题。</li><li>具体来说，给定一组物品，每个物品有确定的重量和价值，需要选择一些物品放入背包中，使得它们的总重量不超过背包容量，同时总价值最大化。</li><li>背包问题有多种不同的变种，包括 <code>0/1 背包</code>、<code>完全背包</code>和<code>多重背包</code>等。</li></ul></blockquote><h2 id="0-1背包问题">0/1背包问题</h2><blockquote><p><code>0/1背包问题</code>是指在有限的容量下，选择某些物品放入背包，每个物品的体积和价值不尽相同，而目标是在不超过背包容量的情况下，让背包所装物品的总价值最大。其中，0/1表示每个物品只能选择<code>装入一次</code>或<code>不装</code>。</p></blockquote><ul><li><strong>例题：</strong> <a href="https://www.acwing.com/problem/content/2/">2. 01背包问题 - AcWing题库</a></li></ul><h3 id="二维解法">二维解法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 10010;</span><br><span class="line"></span><br><span class="line">int n, m;</span><br><span class="line">int f[N][N];</span><br><span class="line">int v[N], w[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n ; i ++)&#123;</span><br><span class="line">        for (int j = 0; j &lt;= m; j ++)&#123;</span><br><span class="line">            f[i][j] = f[i - 1][j];</span><br><span class="line">            if (j &gt;= v[i])</span><br><span class="line">                f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for (int i = 0; i &lt;= m; i ++)&#123;</span><br><span class="line">        res = max(res, f[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接输出结果最大为f-n-m">直接输出结果最大为f[n][m]</h3><p>因为在 <code>j</code> 的循环中，<code>j</code> 是从 <code>m</code> 开始递减到 <code>v[i]</code>。所以，将最大价值记录在 <code>f[n][m]</code> 中即可。当背包容量为 <code>m</code> 时，已经遍历了所有的物品，得到了所有的状态，因此此时 <code>f[n][m]</code> 就是背包在容量为 <code>m</code> 时的最大价值。</p><h3 id="一维优化">一维优化</h3><blockquote><p>将状态<code>f[i][j]</code>优化到一维<code>f[j]</code>，实际上只需要做一个<code>等价变换</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt; </span><br><span class="line">using namespace std; </span><br><span class="line"> </span><br><span class="line">const int N = 10010; </span><br><span class="line"> </span><br><span class="line">int n, m; </span><br><span class="line">int f[N]; </span><br><span class="line">int v[N], w[N]; </span><br><span class="line"> </span><br><span class="line">int main()&#123; </span><br><span class="line">    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m; </span><br><span class="line">    for (int i = 1; i &lt;= n; i ++)&#123; </span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i]; </span><br><span class="line">    &#125; </span><br><span class="line">    for (int i = 1; i &lt;= n ; i ++) </span><br><span class="line">        for (int j = m; j &gt;= v[i]; j --) </span><br><span class="line">            f[j] = max(f[j], f[j - v[i]] + w[i]); </span><br><span class="line">    cout &lt;&lt; f[m]; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，使用了动态规划算法来解决 <code>0/1 背包问题</code>。其中，在计算循环 j 时，使用了状态转移方程：<code>f[j] = max(f[j], f[j - v[i]] + w[i])</code>，表示将第 <code>i</code> 件物品放入背包之后，容量为 <code>j</code> 时的最大价值。</p><h2 id="完全背包问题">完全背包问题</h2><blockquote><ul><li><code>完全背包问题</code>是指在有限的容量下，选择某些物品放入背包，每个物品的体积和价值不尽相同，而目标是在不超过背包容量的情况下，让背包所装物品的总价值最大。与 0/1 背包问题不同的是，每个物品的数量都是无限的，可以选择多次放入，因此也称为多重背包问题。</li></ul></blockquote><blockquote><ul><li>对于完全背包问题，同样可以使用动态规划算法进行求解。在计算 <code>f[i][j]</code>(表示前 i 种物品，总体积不超过 j，所能获得的最大价值) 时，使用的状态转移方程是：<code>f[i][j] = max(f[i - 1][j - k * v[i]] + k * w[i])</code>，其中 <code>k</code> 是 <code>0</code> 到 <code>j/v[i]</code> 中的整数，表示选择放入 i 物品的数量。</li></ul></blockquote><ul><li><strong>例题：</strong><a href="https://www.acwing.com/problem/content/3/">3. 完全背包问题 - AcWing题库</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 10010;</span><br><span class="line"></span><br><span class="line">int n, m;</span><br><span class="line">int f[N];</span><br><span class="line">int v[N], w[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n ; i ++)</span><br><span class="line">        for (int j = v[i]; j &lt;= m; j ++)</span><br><span class="line">            f[j] = max(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    cout &lt;&lt; f[m];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包问题">多重背包问题</h2><ul><li><strong>例题：</strong><a href="https://www.acwing.com/problem/content/5/">5. 多重背包问题 II - AcWing题库</a></li></ul><h3 id="二进制优化">二进制优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 10010;</span><br><span class="line"></span><br><span class="line">int f[N];</span><br><span class="line">int n, m;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    for (int i = 1; i &lt;= n; i ++ )&#123;</span><br><span class="line">        int v, w, s;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        int k = 1;  //二进制优化</span><br><span class="line">        while(k &lt;= s)&#123; </span><br><span class="line">            for(int j = m; j &gt;= v * k; j --)&#123;</span><br><span class="line">                f[j] = max(f[j], f[j-v * k] + w * k);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            s -= k;</span><br><span class="line">            k &lt;&lt;= 1;    //优化内容</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(s)&#123;   //判断是否二进制分完，如果没有，继续分下面的</span><br><span class="line">            for(int j = m; j &gt;= v * s; j --)&#123;</span><br><span class="line">                f[j] = max(f[j], f[j-v * s] + w * s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>与完全背包问题相同，我们可以使用二进制优化来优化多重背包问题。与完全背包问题不同的是，我们需要将一个物品拆分成若干个物品，每个物品的重量和价值是原物品的重量和价值的k倍。这样，在一个物品组合的过程中，我们只需要使用O(W)的时间和空间，从而将时间复杂度优化到O(nW)。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2023/07/13/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2023/07/13/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成树">最小生成树</h1><p>最小生成树（Minimum Spanning Tree，简称 MST）是连接所有节点的边的集合中，权值最小的连通子图的边集合， 即一个加权连通图中，找到一棵生成树，使得所有边的权值之和最小。<strong>最小生成树的求解算法主要有两种：</strong></p><hr><h2 id="kruskal-算法"><strong>Kruskal 算法</strong></h2><p>Kruskal 算法也是一种<code>贪心算法</code>，将所有边按照权值`从小到大排序，逐个加入到已有的边集合中，直到所有节点都被覆盖。<strong>具体步骤如下：</strong></p><blockquote><ol><li>将所有边按照权值从小到大排序。</li><li>依次将每条边加入到已有的边集合中，如果加入该边后形成了环，则舍弃该边。</li><li>重复步骤（2），直到所有节点都被覆盖。</li></ol></blockquote><ul><li>需要注意的是，无向图的最小生成树可能不唯一，但最小生成树的边数是固定的，即节点数减一。</li></ul><h4 id="时间复杂度分析"><strong>时间复杂度分析</strong></h4><p><code>O(ElogE)</code>或者<code>O(ElogV)</code>，其中E代表图中的边的数目，V代表图中的顶点数目。对图中的边按照非降序排列需要<code>O(ElogE)</code>的时间。排序后遍历所有的边并判断添加边是否构成环，判断添加一条边是否构成环最坏情况下需要<code>O(logV)</code>，关于这个复杂度等到景禹给你们谈并查集的时候再分析；因此，总的时间复杂度为<code>O(ElogE + ElogV)</code>，其中E的值最大为<code>V(V-1)/2</code>，因此<code>O(logV)</code>等于 <code>O(logE)</code>。因此，总的时间复杂度为<code>O(ElogE)</code> 或者<code>O(ElogV)</code>。</p><h4 id="代码"><strong>代码</strong></h4><ul><li><strong>C++</strong></li></ul><h2 id="code-0"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> fa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;other) <span class="type">const</span>&#123; <span class="comment">//重载操作符</span></span><br><span class="line">        <span class="keyword">return</span> w &lt; other.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> fu = <span class="built_in">find</span>(e[i].u), fv = <span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (fu != fv)&#123;</span><br><span class="line">            fa[fu] = fv;</span><br><span class="line">            ans += e[i].w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试代码</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; find(i) &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h2 id="prim-算法"><strong>Prim 算法</strong></h2><p>Prim 算法是一种<code>贪心算法</code>，它的基本思想是先将图中的所有边按照权值<code>从小到大</code>排序，然后依次选择边，如果该边的两个端点不在同一个集合中，则将该边加入生成树中。最终生成的树即为最小生成树。从任意一个节点开始，每次选择权值最小的一条边，加入到已有的边集合中，直到所有节点都被覆盖。<strong>具体步骤如下：</strong></p><blockquote><ol><li>从任意一个节点开始，将其加入到已有的节点集合中。</li><li>选择与已有节点集合距离最小的一条边，将其加入到已有的边集合中。</li><li>将该边的另一个节点加入到已有的节点集合中。</li><li>重复步骤（2）和（3），直到所有节点都被覆盖。</li></ol></blockquote><ul><li>不同于Kruskal算法，Prim算法每次只考虑一个节点和生成树之间的边，因此在稠密图中效率更高。</li></ul><h4 id="时间复杂度分析"><strong>时间复杂度分析</strong></h4><p>上面的代码中，当 i == 1的时候，内层的 while 与 for 循环中 j 的取值范围是从 1 到 n-1，内循环一共计算了 <code>2(n-1)</code> 次，其中n为图中的顶点个数； 当 i == 2 的时候，内层循环还是一共计算 <code>2(n-1)</code>次； 以此类推… i 取最大值 n -1，内层循环还是一共计算<code>2(n-1)</code>次； 所以，整体的执行次数就是<code>(n-1) \* 2(n-1)</code>，Prim算法的复杂度是 <code>O(n2)</code>级别的。</p><h4 id="代码"><strong>代码</strong></h4><ul><li><strong>C++</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dis[maxn], vis[maxn];</span><br><span class="line"><span class="type">int</span> g[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; (u == <span class="number">0</span> || dis[v] &lt; dis[u])) &#123;</span><br><span class="line">                u = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        ans += dis[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; g[u][v] &lt; dis[v]) &#123;</span><br><span class="line">                dis[v] = g[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(g, INF, <span class="built_in">sizeof</span>(g));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g[u][v] = g[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">prim</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="优化">优化</h2><blockquote><p>如果要进一步提高Prim算法的效率，可以使用堆优化，将待检查的节点按照权值从小到大加入堆中，这样每次取出堆顶元素时都可以保证该元素是当前权值最小的节点。</p></blockquote><hr><p>参考文献：</p><p><a href="https://zhuanlan.zhihu.com/p/136387766">图解：什么是最小生成树？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/74789463">最小生成树（Kruskal算法和Prim算法） - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMQ问题与ST算法</title>
      <link href="/2023/07/13/RMQ%E9%97%AE%E9%A2%98%E4%B8%8EST%E7%AE%97%E6%B3%95/"/>
      <url>/2023/07/13/RMQ%E9%97%AE%E9%A2%98%E4%B8%8EST%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="rmq问题与st算法">RMQ问题与ST算法</h1><p>RMQ(Range Minimum Query)问题是计算机科学中的一个经典问题，涉及到在给定数组的某个范围内查找最小值。ST(Segment Tree)算法是一种著名且高效的数据结构，可用于解决RMQ问题。<br>本文将介绍RMQ问题，描述ST算法，并在C++中实现它。</p><h2 id="rmq问题">RMQ问题</h2><p>给定一个大小为n的数组A以及两个整数i和j，使得1≤i≤j≤n，则RMQ问题是在子数组A[i，j]中查找最小元素。<br>暴力解决这个问题的方法是扫描给定范围内的所有元素以查找最小值。然而，这种方法需要O(n)时间复杂度。为了获得更好的时间复杂度，我们可以使用ST算法。</p><h2 id="st算法">ST算法</h2><p>ST算法是一种分治方法，它递归地将数组分成较小的段，并构建树来表示每个段的最小值。树的根节点表示整个数组的最小值，而每个叶节点表示单个元素。 ST算法的时间复杂度为O(n log n)。</p><h3 id="预处理">预处理</h3><p>首先，我们需要进行预处理。假设我们有一个大小为n的数组A，我们要构建ST树，使得每个节点表示从左到右的某个子段的最小值。以下是构建ST树的步骤：</p><ol><li>创建一个数组tree，使它的大小为4*n。这个数组表示了ST树。</li><li>定义一个build函数，它采用递归方法构建ST树。它接受4个参数：tree的节点编号，该节点表示的子段的左右端点start和end，以及原始数组A。如果该节点表示单个元素，则该节点的值等于A[start]。否则，我们递归地构建左右子节点，然后将该节点的值设置为左右子节点的最小值。</li><li>在build函数中调用build(1,0,n-1)。这将构建ST树的整个结构。 这是一个示例代码：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">1</span>; <span class="comment">//数组的最大长度</span></span><br><span class="line"> <span class="type">int</span> a[MAXN]; <span class="comment">//存储数组元素的数组</span></span><br><span class="line"> <span class="type">int</span> tree[MAXN * <span class="number">4</span>]; <span class="comment">//存储ST树的数组</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">         tree[node] = a[start];</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">         <span class="built_in">build</span>(<span class="number">2</span> * node, start, mid);</span><br><span class="line">         <span class="built_in">build</span>(<span class="number">2</span> * node + <span class="number">1</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">         tree[node] = <span class="built_in">min</span>(tree[<span class="number">2</span> * node], tree[<span class="number">2</span> * node + <span class="number">1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin &gt;&gt; n;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="询问">询问</h3><p>然后，我们可以查询ST树中的最小值。以下是查询的步骤：</p><ol><li>创建一个query函数，它采用递归方法查询最小值。它接受5个参数：tree的节点编号，该节点表示的子段的左右端点start和end，以及查询的区间[l，r]，其中[l，r]表示我们要查找最小值的子段。如果该节点的子段完全在[l，r]之外，则返回一个极大值。如果该节点的子段完全包含在[l，r]之内，则返回该节点的值。否则，我们递归地查询左右子节点，并返回左右子节点的最小值。</li><li>在循环中，调用query(1,0,n-1,l-1,r-1)，其中l和r是我们要查询的区间。我们将l和r减1，因为数组是从0开始索引的，而不是从1开始索引的。 这是一个示例代码：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (r &lt; start || end &lt; l) &#123;</span><br><span class="line">         <span class="keyword">return</span> INT_MAX; <span class="comment">//极大值</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) &#123;</span><br><span class="line">         <span class="keyword">return</span> tree[node];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">     <span class="type">int</span> p1 = <span class="built_in">query</span>(<span class="number">2</span> * node, start, mid, l, r);</span><br><span class="line">     <span class="type">int</span> p2 = <span class="built_in">query</span>(<span class="number">2</span> * node + <span class="number">1</span>, mid + <span class="number">1</span>, end, l, r);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">min</span>(p1, p2);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="type">int</span> n, q;</span><br><span class="line">     cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">         <span class="type">int</span> l, r;</span><br><span class="line">         cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">         cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, l - <span class="number">1</span>, r - <span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2023/07/13/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/07/13/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集">并查集</h1><blockquote><p><em>并查集是一种用于处理集合合并和查询的数据结构，常用于连通性问题。它可以动态地添加和合并集合，并快速地查询两个元素是否在同一个集合中。</em>                          ————chatGPT</p></blockquote><hr><p>并查集被很多OIer认为是最简洁而优雅的数据结构之一，主要用于解决一些<strong>元素分组</strong>的问题。它管理一系列<strong>不相交的集合</strong>，并支持两种操作：</p><ul><li><strong>合并</strong>（Union）：把两个不相交的集合合并为一个集合。</li><li><strong>查询</strong>（Find）：查询两个元素是否在同一个集合中。</li></ul><blockquote><p>并查集的时间复杂度主要取决于查找的复杂度，因为合并的复杂度一般较小。一般而言，使用路径压缩和按秩合并的优化方法，可以使单次操作的时间复杂度达到 <code>O(log n)</code>。</p></blockquote><hr><h4 id="基本代码">基本代码</h4><ul><li><strong>数据</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[MAXN]; <span class="comment">//代表节点的父节点</span></span><br></pre></td></tr></table></figure><ul><li><strong>初始化</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        fa[i] = i; </span><br><span class="line">    <span class="comment">// 初始状态所有节点的父节点都是它自己</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于<code>inline</code>函数， 看<a href="https://blog.csdn.net/lym940928/article/details/88368363">这里</a> <s>（留个坑， 以后有空讲讲）</s></p></blockquote><ul><li><strong>查询</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>合并</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="优化">优化</h4><blockquote><p>并查集的优化主要包括<strong>路径压缩</strong>和<strong>按秩合并</strong>两种方法。</p></blockquote><ul><li><strong>1. 路径压缩</strong></li></ul><blockquote><p>在查找一个元素所在的集合时，可以将路径上的所有节点都直接连接到根节点上，这样可以使得后续的查找操作更快。<strong>路径压缩的实现方法：</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = <span class="built_in">find</span>(fa[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>2. 按秩合并</strong></li></ul><blockquote><p>这种优化方法也叫<code>加权标记法</code>，在合并两个集合时，可以比较它们的<code>深度(也叫秩)</code>，将深度较小的集合连接到深度较大的集合上，这样可以减少树的深度，提高操作效率。<strong>按秩合并的实现方法：</strong></p></blockquote><ul><li><strong>初始化</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>合并</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">find</span>(i), y = <span class="built_in">find</span>(j);    <span class="comment">//先找到两个根节点</span></span><br><span class="line">    <span class="keyword">if</span> (rank[x] &lt;= rank[y])</span><br><span class="line">        fa[x] = y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fa[y] = x;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y)</span><br><span class="line">        rank[y]++; </span><br><span class="line">        <span class="comment">//如果深度相同且根节点不同，则新的根节点的深度+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>综合使用路径压缩和按秩合并可以达到最优的时间复杂度，即单次操作的时间复杂度为 <code>O(log n)</code>。</li></ul><hr><p>参考文献：</p><p><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) : 并查集 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/the_zed/article/details/105126583">算法与数据结构—— 并查集_酱懵静的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/125604577">通俗易懂地讲解《并查集》 - 知乎 (zhihu.com)</a> python文献</p>]]></content>
      
      
      <categories>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/03/hello-world/"/>
      <url>/2023/07/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
